# -*- coding: utf-8 -*-
"""Heart Disease Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b5JjzyP4aDlXiE3Awpwz1tTc4y5zxeo5

**Importing** **dependencies**
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import warnings
warnings.filterwarnings("ignore")

"""Data Collection And Processing"""

#loading csv data to a Pandas dataFrame
heart_data = pd.read_csv('/content/heart_disease_data.csv')

#print first 5 rows of data frame
heart_data.head()

#print last 5 rows of data frame
heart_data.tail()

#number of rown and column in data set
heart_data.shape

#getting some info about data
heart_data.info()

# checking for missing value
heart_data.isnull().sum()

#statistical measure about the data
heart_data.describe()

#checking distribution of target variable
heart_data['target'].value_counts()

"""**1** --> **Defective** **Heart**

**0** --> **Healthy** **Heart**
"""

X = heart_data.drop(columns='target',axis=1)
Y = heart_data['target']
print(X)
print(Y)

"""splitting data into tarining data & test data"""

X = heart_data.drop(columns='target',axis=1)
Y = heart_data['target']
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

Logistic Regresstion
"""

model = LogisticRegression()

#training the logistic Regressition model with training data
model.fit(X_train, Y_train)

"""model evluation

Accuracy Score
"""

#accurecy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy On training data : ',training_data_accuracy)

#accurecy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy On test data : ',test_data_accuracy)

"""Building  a  predictive System"""

# input_data = (60,0,0,100,268,0,0,160,0,3.6,0,2,2)
input_data = (41,0,1,130,204,0,0,172,0,1.4,2,0,2)


#change the input data to a numpy array

input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array as we are prediciting for only on instance

input_data_reshape = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshape)
print(prediction)

if(prediction[0]==0):
  print('The Person does not have a Heart Disease')
else:
  print(' Person has  Heart Disease')